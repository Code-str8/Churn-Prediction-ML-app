PREDICT PAGE TO DO
1. Create a display form function that shows if the name of the script is main.
    a. The form can be divide into 3 columns (Look out information from your dataset to set the values)
2. Create two different functions to load the 2 models and cache them.
    a. Install joblib or the serilizing package you used to persist the model (recommend you use the same one from your notebook with the same version)
    b. Load a model for each function
    b. Return the pipeline/model
3. Create a select_model function which 
    a. Displays the select box for selection
    b. Checks the state for the current selected value and runs the appropriate model function
    c. Load the encoder
    d. return the pipeline selected and the encoder
4. Install imlearn if you used it to balance your dataset during the modelling phase (recommend you use the same one from 
        your notebook with the same version)
5. Create a make_prediction function, and set the onclick callback to the make_prediction function (Add kwargs)
    a. Create variables for each field by extracting using the session_state
    b. Create a list of the column names
    c. Create a 2-dimensional array with the variables extracted from the session_state and set that as a data variable
    d. Create a dataframe using pandas, and setting the data and columns as parameters
    e. Use the pipeline to make a prediction and convert the prediction to an integer.
    f. Use encoder to inverse transform the numerical prediction of 0 or 1
    g. Get the prediction's probability from the 2-dimensional array
    h. Use an if statement to set the session_state for the prediction and probability variables to none, before the make_prediction function is run
    i. Use the prediction and probability retrieved to update the session_state
    k. return the prediction and probability
6. Show prediction and accompanying probability in the application in human readable way, byt first checking is not none or final_prediction does not exist in the session_state


DATA PAGE TO DO
1. Install pyodbc
2. Create a secrets.toml in your .streamlit folder to store your database credential and API keys if any (this is similar to a .env file so remember not to check it into git)
3. Define a function to connect to the database and cache the connection
 f"DRIVER={SQL Server};SERVER=" {server}";DATABASE="{database}";UID="{username}";PWD={password}"
4. Call the connection function in a script and store it as a connection variable
5. Create a function to read data from the database by passing in a query as a parameter.
    a. The function should return all from records and use the from_records from pandas to display the data and columns in a proper dataframe.(cache data to prevent expensive processes)